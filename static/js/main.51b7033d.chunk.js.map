{"version":3,"sources":["practice/actions/addressbook.js","App.js","serviceWorker.js","practice/reducers/Addressbook.js","practice/reducers/Rootreducer.js","index.js","practice/store/store.js"],"names":["Add","value","type","payload","updated","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","modalClosehandle","event","setState","modalshow","onchangehandler","defineProperty","target","name","firstnameupdatedhandler","updated_first_name","lastnameupdatedhandler","updated_last_name","emailupdatechangehandler","updated_email","contactnumberchangehandler","updated_contact_number","submithandler","preventDefault","state","data","id","uuid","v4","item","dispatch","first_name","last_name","contact_number","email","Edithandler","edit_id","myavailabledolist","find","editid","updated_submithandler","newdata","show","Get_value","bind","assertThisInitialized","list_value","console","log","_this2","length","list","map","react_default","a","createElement","Col","sm","className","Button","variant","onClick","_this$state","style","backgroundColor","color","Container","Form","onSubmit","Row","Group","controlId","Label","Control","placeholder","onChange","Modal","Header","closeButton","Title","Body","Component","connect","Addressbook","Boolean","window","location","hostname","match","combineReducers","arguments","undefined","action","concat","toConsumableArray","selected","index","findIndex","x","splice","All_edit_data","store","createStore","rootreducer","applyMiddleware","thunk","jsx","es","src_App","getState","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.51b7033d.chunk.js","sourcesContent":["export const Add = (value) => ({\r\n    type: \"ADD_LIST\",\r\n    payload: value\r\n})\r\nexport const updated = (value) => ({\r\n    type: \"FOR_UPDATED\",\r\n    payload: value\r\n})\r\nexport const RemoveItemFromList = (value) => ({\r\n    type: \"REMOVE_ITEM_FOM_LIST\",\r\n    payload: value\r\n})\r\n\r\nexport const ClearList = (value) => ({\r\n    type: \"REMOVE_ALL_FOM_LIST\"\r\n})","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport uuid from \"uuid\";\nimport { Add, RemoveItemFromList, updated } from \"./practice/actions/addressbook\";\nimport { Col, Button, Container, Row, Card, Form, variant, Modal } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            first_name: null,\n            last_name: null,\n            email: null,\n            contact_number: null,\n            updated_first_name: null,\n            updated_last_name: null,\n            updated_email: null,\n            updated_contact_number: null,\n            editid: null,\n            show: false,\n            modalshow: false,\n        };\n\n        this.Get_value = this.Get_value.bind(this);\n        this.submithandler = this.submithandler.bind(this);\n        this.list_value = this.list_value.bind(this);\n        this.Edithandler = this.Edithandler.bind(this);\n        this.modalClosehandle = this.modalClosehandle.bind(this)\n    }\n\n    Get_value(event) {\n        this.setState({ value: event.target.value });\n    }\n    modalClosehandle = (event) => {\n        this.setState({\n            modalshow: false\n        })\n    }\n\n\n    onchangehandler = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n\n    firstnameupdatedhandler = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            updated_first_name: event.target.value\n        })\n    }\n    lastnameupdatedhandler = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            updated_last_name: event.target.value\n        })\n    }\n    emailupdatechangehandler = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            updated_email: event.target.value\n        })\n    }\n\n    contactnumberchangehandler = (event) => {\n        // console.log(event.target.value);\n        this.setState({\n            updated_contact_number: event.target.value\n        })\n    }\n\n\n    // for add value\n    submithandler = (event) => {\n        event.preventDefault()\n        // console.log(\"input data\", this.state)\n        if (this.state !== \"\") {\n            // alert(this.state);\n            var data = {};\n            data.id = uuid.v4();\n            data.item = this.state;\n            this.props.dispatch(Add(data));\n            this.setState({ first_name: \"\", last_name: \"\", contact_number: \"\", email: \"\" });\n        }\n    }\n\n    Edithandler = (event) => {\n        var edit_id = event.target.id;\n        var myavailabledolist = this.props.myavailabledolist;\n        const data = myavailabledolist.find(item => item.id === edit_id);\n        this.setState({\n            modalshow: true,\n            editid: edit_id,\n            updated_first_name: data.item.first_name,\n            updated_last_name: data.item.last_name,\n            updated_email: data.item.email,\n            updated_contact_number: data.item.contact_number\n        })\n    }\n\n    updated_submithandler = (event) => {\n        event.preventDefault()\n        this.setState({ modalshow: false, })\n        if (this.state !== \"\") {\n            var newdata = {};\n            newdata.id = this.state.editid;\n            newdata.first_name = this.state.updated_first_name;\n            newdata.last_name = this.state.updated_last_name;\n            newdata.email = this.state.updated_email;\n            newdata.contact_number = this.state.updated_contact_number;\n            this.props.dispatch(updated(newdata));\n        }\n    }\n\n\n\n    //for remove single value\n    list_value(event) {\n        // alert();\n        this.props.dispatch(RemoveItemFromList(event.target.id))\n    }\n\n    // for see avilabel state on load componenetdidmount menthod\n    componentDidMount() {\n        console.log(\"available\", this.props.myavailabledolist);\n    }\n\n    render() {\n        var myavailabledolist = this.props.myavailabledolist;\n        // console.log(myavailabledolist);\n        if (myavailabledolist.length > 0 && myavailabledolist!==null) {\n            var list = myavailabledolist.map(item => (\n                <Col sm={4} >\n                    <div className=\"address_listing\">\n                        <h5>Name : {item.item.first_name}{item.item.last_name}</h5>\n                        <p> Email : {item.item.email}<br />\n                         Contact Number : {item.item.contact_number}</p>\n                        <span>\n                            <Button className=\"pull-right\" variant=\"danger\" id={item.id} onClick={this.list_value}>Delete</Button>\n                            <Button variant=\"primary\" id={item.id} onClick={this.Edithandler}  >Edit</Button>\n                        </span>\n                    </div>\n                </Col>\n            ));\n        }\n        else {\n            list = <div className=\"text-center w-100\"><h2>No Address Found </h2></div>\n        }\n\n        const { first_name, last_name, contact_number, email, updated_first_name, updated_last_name, updated_email, updated_contact_number, edit_id } = this.state;\n        return (\n\n            <div style={{ backgroundColor: \"#2a283d\", color: \"wheat\" }}>\n                <Container>\n                    <h1 className=\"text-center mt2\">Address Book</h1>\n                    <Form onSubmit={this.submithandler}>\n                        <Row>\n                            <Col sm={6}>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label> First Name</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter First Name\" name=\"first_name\" onChange={this.onchangehandler} value={first_name} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label> Last Name</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter Last Name\" name=\"last_name\" onChange={this.onchangehandler} value={last_name} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group controlId=\"formBasicPassword\">\n                                    <Form.Label>Email</Form.Label>\n                                    <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" onChange={this.onchangehandler} value={email} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={6}>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                    <Form.Label>Contact Number</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter Contact Number\" name=\"contact_number\" onChange={this.onchangehandler} value={contact_number} />\n                                </Form.Group>\n                            </Col>\n                            <Col sm={12}>\n                                <Button variant=\"success\" type=\"submit\"> Submit</Button>\n                            </Col>\n                        </Row>\n                    </Form>\n\n                    <Modal show={this.state.modalshow}  >\n                        <Modal.Header closeButton onClick={this.modalClosehandle}>\n                            <Modal.Title>Update Address Details</Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            <Form onSubmit={this.updated_submithandler}>\n                                <Row>\n                                    <Col sm={6}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Control type=\"hidden\" name=\"id\" value={edit_id} />\n                                            <Form.Label> First Name</Form.Label>\n                                            <Form.Control type=\"text\" onChange={this.firstnameupdatedhandler} name=\"first_name\" value={updated_first_name} />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label> Last Name</Form.Label>\n                                            <Form.Control type=\"text\" onChange={this.lastnameupdatedhandler} name=\"last_name\" value={updated_last_name} />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label> Email</Form.Label>\n                                            <Form.Control type=\"email\" onChange={this.emailupdatechangehandler} name=\"email\" value={updated_email} />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={6}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Form.Label> Contact Number</Form.Label>\n                                            <Form.Control type=\"text\" onChange={this.contactnumberchangehandler} name=\"contact_number\" value={updated_contact_number} />\n                                        </Form.Group>\n                                    </Col>\n                                    <Col sm={12}>\n                                        <Form.Group controlId=\"formBasicEmail\">\n                                            <Button variant=\"success\" type=\"submit\" className=\"themesflat-button blue\"> Save Changes</Button>\n                                        </Form.Group>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </Modal.Body>\n                    </Modal>\n\n                    <Row className=\"all_address\">\n                        {list}\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        myavailabledolist: state.Addressbook\n    };\n};\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const Addressbook = [];\r\n\r\nexport default (state = Addressbook, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_LIST':\r\n            return [\r\n                ...state, action.payload\r\n            ];\r\n\r\n        case 'REMOVE_ITEM_FOM_LIST':\r\n            var selected = action.payload\r\n            var index = state.findIndex(x => x.id === selected);\r\n            state.splice(index, 1);\r\n            return [...state];\r\n\r\n        case 'FOR_UPDATED':\r\n            var All_edit_data = action.payload;\r\n            const data = state.find(item => item.id === All_edit_data.id);\r\n            data.item.first_name = All_edit_data.first_name;\r\n            data.item.last_name = All_edit_data.last_name;\r\n            data.item.contact_number = All_edit_data.contact_number;\r\n            data.item.email = All_edit_data.email;\r\n\r\n            return [...state];\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import Addressbookreducer from './Addressbook';\r\nimport {combineReducers} from 'redux';\r\n\r\nexport default combineReducers({\r\n    Addressbook:Addressbookreducer,\r\n    \r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Mystore from './practice/store/store';\nimport {Provider} from 'react-redux';\n\nconst store = Mystore();\n\nconst jsx= (\n    <Provider store={store}>\n       <App />          \n    </Provider>\n)\nconsole.log(store.getState())\nReactDOM.render(jsx, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// const element=<h1>welcome to Website</h1>\n\n// ReactDOM.render(element,document.getElementById('root'));","import {createStore,combineReducers,applyMiddleware} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootreducer from '../reducers/Rootreducer';\r\n\r\n\r\nexport default()=>{\r\n    const store = createStore(rootreducer,applyMiddleware(thunk));\r\n    return store;\r\n}\r\n\r\n"],"sourceRoot":""}